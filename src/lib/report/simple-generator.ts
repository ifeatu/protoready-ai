import { AssessmentResult } from '@/types/assessment'

export interface SimpleReportConfig {
  reportType: 'free' | 'basic' | 'professional'
  projectName: string
  companyName?: string
}

export class SimpleReportGenerator {
  generateHTMLReport(assessment: AssessmentResult, config: SimpleReportConfig): string {
    const timestamp = new Date().toLocaleDateString()
    
    const html = `<!DOCTYPE html>
<html>
<head>
    <title>Production Readiness Assessment - ${config.projectName}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
        .header { background: #4F46E5; color: white; padding: 20px; text-align: center; margin-bottom: 30px; }
        .metric-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
        .metric-card { border: 1px solid #ddd; padding: 15px; text-align: center; border-radius: 8px; }
        .score { font-size: 2em; font-weight: bold; }
        .findings { margin: 20px 0; }
        .finding { background: #f9f9f9; padding: 10px; margin: 10px 0; border-left: 4px solid #4F46E5; }
        .severity-critical { border-left-color: #DC2626; }
        .severity-high { border-left-color: #F59E0B; }
        .severity-medium { border-left-color: #10B981; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Production Readiness Assessment</h1>
        <h2>${config.projectName}</h2>
        <p>Generated on ${timestamp}</p>
    </div>

    <div class="metric-grid">
        <div class="metric-card">
            <div class="score">${assessment.overallScore}</div>
            <div>Overall Score</div>
        </div>
        <div class="metric-card">
            <div class="score">${assessment.deploymentReadiness.toUpperCase()}</div>
            <div>Deployment Status</div>
        </div>
        <div class="metric-card">
            <div class="score">${assessment.scalabilityIndex}/5</div>
            <div>Scalability</div>
        </div>
        <div class="metric-card">
            <div class="score">${assessment.maintainabilityGrade}</div>
            <div>Maintainability</div>
        </div>
    </div>

    <h2>Executive Summary</h2>
    <p>Your application has received an overall score of <strong>${assessment.overallScore}/100</strong>.</p>
    <p>Security Rating: <strong>${assessment.securityRating.toUpperCase()}</strong></p>
    <p>Deployment Readiness: <strong>${assessment.deploymentReadiness.toUpperCase()}</strong></p>

    ${config.reportType !== 'free' ? this.generateDetailedFindings(assessment) : '<p><em>Upgrade to see detailed findings and recommendations.</em></p>'}

    <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center; color: #666;">
        <p>Generated by ${config.companyName || 'ProtoReady.ai'}</p>
    </div>
</body>
</html>`

    return html
  }

  private generateDetailedFindings(assessment: AssessmentResult): string {
    if (!assessment.detailedFindings.length) {
      return '<p>No significant issues found.</p>'
    }

    const findingsHtml = assessment.detailedFindings.map(finding => `
      <div class="finding severity-${finding.severity}">
        <h4>${finding.title} (${finding.severity.toUpperCase()})</h4>
        <p><strong>Description:</strong> ${finding.description}</p>
        <p><strong>Recommendation:</strong> ${finding.recommendation}</p>
        <p><strong>Effort:</strong> ${finding.effort}</p>
      </div>
    `).join('')

    return `
      <h2>Detailed Findings</h2>
      <div class="findings">
        ${findingsHtml}
      </div>
    `
  }

  generateSummary(assessment: AssessmentResult): string {
    const criticalIssues = assessment.detailedFindings.filter(f => f.severity === 'critical').length
    const highIssues = assessment.detailedFindings.filter(f => f.severity === 'high').length

    return `Production Readiness Assessment Summary

Overall Score: ${assessment.overallScore}/100
Security Rating: ${assessment.securityRating.toUpperCase()}
Scalability: ${assessment.scalabilityIndex}/5 stars
Maintainability: Grade ${assessment.maintainabilityGrade}
Deployment Status: ${assessment.deploymentReadiness.toUpperCase()}

Issues Found:
- Critical: ${criticalIssues}
- High: ${highIssues}
- Total: ${assessment.detailedFindings.length}

${assessment.estimatedCost ? `Implementation Cost: $${assessment.estimatedCost.min.toLocaleString()} - $${assessment.estimatedCost.max.toLocaleString()}` : ''}

Next Steps: ${assessment.deploymentReadiness === 'ready' ? 'Ready for production deployment' : 'Address identified issues before deployment'}`
  }
}

export const simpleReportGenerator = new SimpleReportGenerator()